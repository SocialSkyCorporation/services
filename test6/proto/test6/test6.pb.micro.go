// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/test6/test6.proto

package go_micro_srv_test6

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Test6 service

type Test6Service interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Test6_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (Test6_PingPongService, error)
}

type test6Service struct {
	c    client.Client
	name string
}

func NewTest6Service(name string, c client.Client) Test6Service {
	return &test6Service{
		c:    c,
		name: name,
	}
}

func (c *test6Service) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Test6.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *test6Service) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Test6_StreamService, error) {
	req := c.c.NewRequest(c.name, "Test6.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &test6ServiceStream{stream}, nil
}

type Test6_StreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type test6ServiceStream struct {
	stream client.Stream
}

func (x *test6ServiceStream) Close() error {
	return x.stream.Close()
}

func (x *test6ServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *test6ServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *test6ServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *test6ServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *test6Service) PingPong(ctx context.Context, opts ...client.CallOption) (Test6_PingPongService, error) {
	req := c.c.NewRequest(c.name, "Test6.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &test6ServicePingPong{stream}, nil
}

type Test6_PingPongService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type test6ServicePingPong struct {
	stream client.Stream
}

func (x *test6ServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *test6ServicePingPong) Context() context.Context {
	return x.stream.Context()
}

func (x *test6ServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *test6ServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *test6ServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *test6ServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Test6 service

type Test6Handler interface {
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, Test6_StreamStream) error
	PingPong(context.Context, Test6_PingPongStream) error
}

func RegisterTest6Handler(s server.Server, hdlr Test6Handler, opts ...server.HandlerOption) error {
	type test6 interface {
		Call(ctx context.Context, in *Request, out *Response) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
	}
	type Test6 struct {
		test6
	}
	h := &test6Handler{hdlr}
	return s.Handle(s.NewHandler(&Test6{h}, opts...))
}

type test6Handler struct {
	Test6Handler
}

func (h *test6Handler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.Test6Handler.Call(ctx, in, out)
}

func (h *test6Handler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.Test6Handler.Stream(ctx, m, &test6StreamStream{stream})
}

type Test6_StreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type test6StreamStream struct {
	stream server.Stream
}

func (x *test6StreamStream) Close() error {
	return x.stream.Close()
}

func (x *test6StreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *test6StreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *test6StreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *test6StreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *test6Handler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.Test6Handler.PingPong(ctx, &test6PingPongStream{stream})
}

type Test6_PingPongStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type test6PingPongStream struct {
	stream server.Stream
}

func (x *test6PingPongStream) Close() error {
	return x.stream.Close()
}

func (x *test6PingPongStream) Context() context.Context {
	return x.stream.Context()
}

func (x *test6PingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *test6PingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *test6PingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *test6PingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
