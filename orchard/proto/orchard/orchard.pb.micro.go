// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/orchard/orchard.proto

package go_micro_srv_orchard

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Orchard service

type OrchardService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Orchard_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (Orchard_PingPongService, error)
}

type orchardService struct {
	c    client.Client
	name string
}

func NewOrchardService(name string, c client.Client) OrchardService {
	return &orchardService{
		c:    c,
		name: name,
	}
}

func (c *orchardService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Orchard.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchardService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Orchard_StreamService, error) {
	req := c.c.NewRequest(c.name, "Orchard.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &orchardServiceStream{stream}, nil
}

type Orchard_StreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type orchardServiceStream struct {
	stream client.Stream
}

func (x *orchardServiceStream) Close() error {
	return x.stream.Close()
}

func (x *orchardServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *orchardServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *orchardServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *orchardServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orchardService) PingPong(ctx context.Context, opts ...client.CallOption) (Orchard_PingPongService, error) {
	req := c.c.NewRequest(c.name, "Orchard.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &orchardServicePingPong{stream}, nil
}

type Orchard_PingPongService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type orchardServicePingPong struct {
	stream client.Stream
}

func (x *orchardServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *orchardServicePingPong) Context() context.Context {
	return x.stream.Context()
}

func (x *orchardServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *orchardServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *orchardServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *orchardServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Orchard service

type OrchardHandler interface {
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, Orchard_StreamStream) error
	PingPong(context.Context, Orchard_PingPongStream) error
}

func RegisterOrchardHandler(s server.Server, hdlr OrchardHandler, opts ...server.HandlerOption) error {
	type orchard interface {
		Call(ctx context.Context, in *Request, out *Response) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
	}
	type Orchard struct {
		orchard
	}
	h := &orchardHandler{hdlr}
	return s.Handle(s.NewHandler(&Orchard{h}, opts...))
}

type orchardHandler struct {
	OrchardHandler
}

func (h *orchardHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.OrchardHandler.Call(ctx, in, out)
}

func (h *orchardHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.OrchardHandler.Stream(ctx, m, &orchardStreamStream{stream})
}

type Orchard_StreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type orchardStreamStream struct {
	stream server.Stream
}

func (x *orchardStreamStream) Close() error {
	return x.stream.Close()
}

func (x *orchardStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *orchardStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *orchardStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *orchardStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *orchardHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.OrchardHandler.PingPong(ctx, &orchardPingPongStream{stream})
}

type Orchard_PingPongStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type orchardPingPongStream struct {
	stream server.Stream
}

func (x *orchardPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *orchardPingPongStream) Context() context.Context {
	return x.stream.Context()
}

func (x *orchardPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *orchardPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *orchardPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *orchardPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
