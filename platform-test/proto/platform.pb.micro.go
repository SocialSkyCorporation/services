// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/platform.proto

package go_micro_srv_platform_test

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PlatformTest service

type PlatformTestService interface {
	GetHealth(ctx context.Context, in *GetHealthRequest, opts ...client.CallOption) (*GetHealthResponse, error)
}

type platformTestService struct {
	c    client.Client
	name string
}

func NewPlatformTestService(name string, c client.Client) PlatformTestService {
	return &platformTestService{
		c:    c,
		name: name,
	}
}

func (c *platformTestService) GetHealth(ctx context.Context, in *GetHealthRequest, opts ...client.CallOption) (*GetHealthResponse, error) {
	req := c.c.NewRequest(c.name, "PlatformTest.GetHealth", in)
	out := new(GetHealthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PlatformTest service

type PlatformTestHandler interface {
	GetHealth(context.Context, *GetHealthRequest, *GetHealthResponse) error
}

func RegisterPlatformTestHandler(s server.Server, hdlr PlatformTestHandler, opts ...server.HandlerOption) error {
	type platformTest interface {
		GetHealth(ctx context.Context, in *GetHealthRequest, out *GetHealthResponse) error
	}
	type PlatformTest struct {
		platformTest
	}
	h := &platformTestHandler{hdlr}
	return s.Handle(s.NewHandler(&PlatformTest{h}, opts...))
}

type platformTestHandler struct {
	PlatformTestHandler
}

func (h *platformTestHandler) GetHealth(ctx context.Context, in *GetHealthRequest, out *GetHealthResponse) error {
	return h.PlatformTestHandler.GetHealth(ctx, in, out)
}
